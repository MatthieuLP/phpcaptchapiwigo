<?php
if (!defined('PHPWG_ROOT_PATH')) die('Hacking attempt!');

global $template;

$template->set_filenames(
	array(
		'plugin_admin_content' => dirname(__FILE__).'/admin.tpl'
	)
);

require_once __DIR__ . '/phpcaptchaconfig.php';

class PHPCaptcha_Admin {
	
	private $presets;
	private $config;
	private $thispath;
	private $webroot;
	
	public function __construct() {
		global $template;
		
		$this->thispath = PHPWG_PLUGINS_PATH . 'phpcaptchapiwigo/';
		$this->webroot = get_absolute_root_url() . 'plugins/phpcaptchapiwigo/';
		
		//read presets
		$this->presets = PhpCaptchaConfig::getPresets();
		
		if ( isset( $_POST['submit'] ) ) {
			
			$this->saveFormData($this->presets, $_POST);

		}

		$this->config = PhpCaptchaConfig::readConfig();
		
		//push them to template
		$this->setTemplateVars(
			$this->config,
			$this->presets,
			$this->thispath,
			$this->webroot);
		
		// Assign the template contents to ADMIN_CONTENT
		$template->assign_var_from_handle('ADMIN_CONTENT', 'plugin_admin_content');
	
		
		
		
		
	}
	
	function saveFormData($valid, $input) {
		
		$sourceIsForm = true;
		
		$valid['stringlength'] = $this->sanitize_integer($valid['stringlength'], $input['stringlength'],
			'Number of characters', 'stringlength');
		
		$valid['charstouse'] = $this->sanitize_charstouse($valid['charstouse'], $input['charstouse'],
			'Characters allowed', 'charstouse', 10, $sourceIsForm );
		
		$valid['strictlowercase'] = $this->sanitize_boolean($valid['strictlowercase'], $input['strictlowercase'],
			'Strict to lower case', 'strictlowercase', $sourceIsForm);
		
		//bgcolor
		$valid['bgcolor'] = $this->sanitize_color($valid['bgcolor'], $input['bgcolor'],
			'Background color', 'background_color');
		
		//textcolor
		$valid['textcolor'] = $this->sanitize_color($valid['textcolor'], $input['textcolor'],
			'Text color','text_color');
		
		//linecolor
		$valid['linecolor'] = $this->sanitize_color($valid['linecolor'], $input['linecolor'],
			'Line color', 'line_color');
		
		$valid['sizewidth'] = $this->sanitize_integer($valid['sizewidth'], $input['sizewidth'],
			'Image width', 'sizewidth');
		
		$valid['sizeheight'] = $this->sanitize_integer($valid['sizeheight'], $input['sizeheight'],
			'Image height', 'sizeheight');
		
		$valid['fontsize'] = $this->sanitize_integer($valid['fontsize'], $input['fontsize'],
			'Font size', 'fontsize');
		
		$valid['numberoflines'] = $this->sanitize_integer($valid['numberoflines'], $input['numberoflines'],
			'Number of lines', 'numberoflines');
		
		$valid['thicknessoflines'] = $this->sanitize_integer($valid['thicknessoflines'], $input['thicknessoflines'],
			'Thickness of lines', 'thicknessoflines');
		
		$valid['allowad'] = $this->sanitize_integer($valid['allowad'], $input['allowad'],
			'Allow small advertisement below Captcha image', 'allowad');
		
		//write setting into file for db-less access
		$file = __DIR__ ."/config.php";
		
		$current='';
		$current .= "<?php\n";
		$current .= "//do not edit this file, gets overwritten by admin actions\n";
		$current .= "//created ".date("Y-m-d H:i:s O")."\n";
		$current .= '$stringlength='.$valid['stringlength'].";\n";
		$current .= '$charstouse=\''.$valid['charstouse']."';\n";
		$current .= '$strictlowercase='.($valid['strictlowercase'] == "1" ? "true":"false").";\n";
		$current .= '$bgcolor=\''.$valid['bgcolor']."';\n";
		$current .= '$textcolor=\''.$valid['textcolor']."';\n";
		$current .= '$linecolor=\''.$valid['linecolor']."';\n";
		$current .= '$sizewidth='.$valid['sizewidth'].";\n";
		$current .= '$sizeheight='.$valid['sizeheight'].";\n";
		$current .= '$fontsize='.$valid['fontsize'].";\n";
		$current .= '$numberoflines='.$valid['numberoflines'].";\n";
		$current .= '$thicknessoflines='.$valid['thicknessoflines'].";\n";
		$current .= '$allowad='.($valid['allowad'] == "1" ? "true":"false").";\n";
		$current .= "\n\n\n//END OF FILE\n";
		
		file_put_contents($file, $current);
		
		
		
	}
	
	
	
	
	private function setTemplateVars($settings, $presets, $thispath, $webroot) {
		global $template;

		$template->assign('captcha', array(
			"settings" => $settings,
			"presets" => $presets,
			"thispath" => $thispath,
			"webroot" => $webroot
		));
		
		
	}
	
	private function sanitize_color($valid, $input, $setting_title, $setting_errorid) {
		$validreturn = (isset($input) && !empty($input))
			? $input : $valid;
		if ( !empty($validreturn) && !preg_match( '/^[a-f0-9]{6}$/i', $validreturn ) ) {
			
			printf('Please enter a valid hex value for %s, (#RRGGBB)', $setting_title);
			return $valid;
		}
		return $validreturn;
	}
	
	private function sanitize_integer($valid, $input, $setting_title, $setting_errorid) {
		$validreturn = (isset($input) && !empty($input))
			? $input : $valid;
		if ( !empty($validreturn) && !preg_match( '/^[0-9]/i', $validreturn ) ) {
			printf('Please enter a valid integer value for %s',$setting_title);
			return $valid;
		}
		return $validreturn;
	}
	
	private function sanitize_charstouse($valid, $input, $setting_title, $setting_errorid, $minlength, $sourceIfForm) {
		if($sourceIfForm) {
			if(strlen($input) < $minlength) {
				printf('Please enter a valid value for %s, at least %d chars long', $setting_title, $minlength);
				return $valid;
			}
			if ( !preg_match( '/^[a-zA-Z0-9]/i', $input )) {
				printf('Please enter a valid value for %s, at least %d chars long', $setting_title, $minlength);
				return $valid;
			}
			return $input;
		} else {
			return $valid;
		}
	}
	
	private function sanitize_boolean($valid, $input, $setting_title, $setting_errorid, $sourceIsForm) {
		if($sourceIsForm) {
			if(isset($input) && $input == "1") {
				$validreturn = 1;
			} else {
				$validreturn = 0;
			}
		} else {
			$validreturn = $valid;
		}
		if ( !empty($validreturn) && !preg_match( '/^[0-1]{1}$/i', $validreturn )) {
			printf('Please enter a valid value for %s, (on/off)', $setting_title);
			return $valid;
		}
		return $validreturn;
	}
	
}

$phpcaptcha_admin = new PHPCaptcha_Admin();
